import os
import telebot
from flask import Flask, request
from telebot import types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "6529188202"))

KASPI_NUMBER_1 = "+77752549373"
KASPI_NUMBER_2 = "+77078754556"
KASPI_LINK = "https://kaspi.kz/transfers"
BREAD_PRICE = 150

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
user_data = {}
COMMAND_BUTTONS = ["üçû –ù–∞–Ω“ì–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä—É", "üìû –ë–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ"]

def main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(*COMMAND_BUTTONS)
    return markup

def reset_user_state(chat_id):
    user_data[chat_id] = {}

@bot.message_handler(commands=['start'])
def start_handler(message):
    reset_user_state(message.chat.id)
    bot.send_message(message.chat.id, "–¢”©–º–µ–Ω–¥–µ–≥—ñ –º”ô–∑—ñ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìû –ë–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ")
def contact_info(message):
    reset_user_state(message.chat.id)
    bot.send_message(
        message.chat.id,
        f"üìû {KASPI_NUMBER_1}\nüìû {KASPI_NUMBER_2}",
        reply_markup=main_menu_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "üçû –ù–∞–Ω“ì–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä—É")
def order_bread(message):
    chat_id = message.chat.id
    reset_user_state(chat_id)
    bot.send_message(chat_id, "üë§ –ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    if message.text in COMMAND_BUTTONS:
        return start_handler(message)
    chat_id = message.chat.id
    user_data[chat_id]['name'] = message.text
    bot.send_message(chat_id, "üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑:")
    bot.register_next_step_handler(message, get_phone)

def get_phone(message):
    if message.text in COMMAND_BUTTONS:
        return start_handler(message)
    chat_id = message.chat.id
    user_data[chat_id]['phone'] = message.text
    bot.send_message(chat_id, "üçû “ö–∞–Ω—à–∞ –Ω–∞–Ω “õ–∞–∂–µ—Ç –µ–∫–µ–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã, 2):")
    bot.register_next_step_handler(message, get_quantity)

def get_quantity(message):
    if message.text in COMMAND_BUTTONS:
        return start_handler(message)
    chat_id = message.chat.id
    qty = message.text.strip()
    if not qty.isdigit():
        bot.send_message(chat_id, "–°–∞–Ω–º–µ–Ω –∂–∞–∑—ã“£—ã–∑. “ö–∞–π—Ç–∞–¥–∞–Ω:")
        return bot.register_next_step_handler(message, get_quantity)
    user_data[chat_id]['quantity'] = int(qty)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("üöö –ñ–µ—Ç–∫—ñ–∑—É –∫–µ—Ä–µ–∫", "‚ùå –ñ–µ—Ç–∫—ñ–∑—É “õ–∞–∂–µ—Ç –µ–º–µ—Å")
    bot.send_message(chat_id, "–ñ–µ—Ç–∫—ñ–∑—É –∫–µ—Ä–µ–∫ –ø–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, get_delivery)

def get_delivery(message):
    chat_id = message.chat.id
    text = message.text.strip()
    if text == "üöö –ñ–µ—Ç–∫—ñ–∑—É –∫–µ—Ä–µ–∫":
        bot.send_message(chat_id, "üìç –ú–µ–∫–µ–Ω–∂–∞–π—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:")
        bot.register_next_step_handler(message, get_address)
    elif text == "‚ùå –ñ–µ—Ç–∫—ñ–∑—É “õ–∞–∂–µ—Ç –µ–º–µ—Å":
        user_data[chat_id]['address'] = "–ñ–µ—Ç–∫—ñ–∑—É “õ–∞–∂–µ—Ç –µ–º–µ—Å"
        show_summary(chat_id)
    else:
        bot.send_message(chat_id, "–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:")
        return bot.register_next_step_handler(message, get_delivery)

def get_address(message):
    chat_id = message.chat.id
    user_data[chat_id]['address'] = message.text
    show_summary(chat_id)

def show_summary(chat_id):
    data = user_data[chat_id]
    quantity = data['quantity']
    total = quantity * BREAD_PRICE
    data['total'] = total
    delivery_note = f"üì¶ –ñ–µ—Ç–∫—ñ–∑—É: {data['address']}"
    total_note = f"üí∞ –ñ–∞–ª–ø—ã —Å–æ–º–∞: {total} —Ç"
    kaspi_notice = "üìÑ Kaspi –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ–º –∂–∞—Å–∞—Å–∞“£—ã–∑, —Ç”©–ª–µ–º —á–µ–≥—ñ–Ω –æ—Å—ã —á–∞—Ç“õ–∞ PDF —Ç“Ø—Ä—ñ–Ω–¥–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.\nüìë *–¢–µ–∫ PDF —Ñ–æ—Ä–º–∞—Ç—Ç–∞“ì—ã —á–µ–∫ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.*"
    summary = (
        f"*–¢–∞–ø—Å—ã—Ä—ã—Å –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ:*\n"
        f"üë§ –ê—Ç—ã-–∂”©–Ω—ñ: {data['name']}\n"
        f"üìû –¢–µ–ª: {data['phone']}\n"
        f"üçû –ù–∞–Ω —Å–∞–Ω—ã: {quantity}\n"
        f"{delivery_note}\n"
        f"{total_note}\n\n"
        f"{kaspi_notice}\n\n"
        f"–¢”©–ª–µ–º –∂–∞—Å–∞—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üè¶ Kaspi –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ—É", url=KASPI_LINK))
    markup.add(types.InlineKeyboardButton("üí∞ “ö–æ–ª–º–∞-“õ–æ–ª —Ç”©–ª–µ–º", callback_data="cash_payment"))
    bot.send_message(chat_id, summary, parse_mode="Markdown", reply_markup=markup)
    bot.send_message(ADMIN_ID, f"üì• –ñ–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å:\nüë§ {data['name']}\nüìû {data['phone']}\nüçû {quantity} –Ω–∞–Ω\n{delivery_note}\nüí∞ –°–æ–º–∞: {total} —Ç")

@bot.callback_query_handler(func=lambda call: call.data == "cash_payment")
def handle_cash_payment(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "‚úÖ “ö–æ–ª–º–∞-“õ–æ–ª —Ç”©–ª–µ–º —Ç–∞“£–¥–∞–ª–¥—ã. –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ ”©“£–¥–µ–ª—É–¥–µ. –†–∞“õ–º–µ—Ç!", reply_markup=main_menu_keyboard())

@bot.message_handler(content_types=['document'])
def handle_pdf_check(message):
    chat_id = message.chat.id
    if not message.document.file_name.lower().endswith('.pdf'):
        bot.send_message(chat_id, "‚ö†Ô∏è –¢–µ–∫ PDF —Ñ–æ—Ä–º–∞—Ç—Ç–∞“ì—ã —á–µ–∫ “õ–∞–±—ã–ª–¥–∞–Ω–∞–¥—ã.")
        return
    data = user_data.get(chat_id, {})
    if not data:
        bot.send_message(chat_id, "“ö–∞—Ç–µ: —Ç–∞–ø—Å—ã—Ä—ã—Å –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return
    caption = (
        f"üìÑ –ö–ª–∏–µ–Ω—Ç—Ç–µ–Ω —á–µ–∫ –∫–µ–ª–¥—ñ:\n"
        f"üë§ {data.get('name', '-')}\n"
        f"üìû {data.get('phone', '-')}\n"
        f"üçû {data.get('quantity', '-')}\n"
        f"üì¶ {data.get('address', '-')}\n"
        f"üí∞ {data.get('total', '-')} —Ç"
    )
    bot.send_message(chat_id, "‚úÖ –¢”©–ª–µ–º —á–µ–≥—ñ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã. –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ ”©“£–¥–µ–ª—É–¥–µ. –†–∞“õ–º–µ—Ç!", reply_markup=main_menu_keyboard())
    bot.send_document(ADMIN_ID, message.document.file_id, caption=caption)

# === Flask Webhook –±”©–ª—ñ–º—ñ ===
@app.route('/')
def index():
    return "ü§ñ Dostyk Bakery Bot is running!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=f"https://bakery-et4d.onrender.com/{7817614647:AAHcitaNuYfw9PwAVcO6A3oFHJzfu8hEgeM}")
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)